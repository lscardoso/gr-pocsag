options:
  parameters:
    author: ON1ARF & Tauebenuss
    category: Custom
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: Sending Pocsag Messages via HACKRF One
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: pocsag_sender
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: POCSAG Sender via HackRF
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [9, 9]
    rotation: 0
    state: enabled

blocks:
- name: af_gain
  id: variable
  parameters:
    comment: ''
    value: '190'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1106, 23]
    rotation: 0
    state: enabled
- name: max_deviation
  id: variable
  parameters:
    comment: ''
    value: '4500.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 23]
    rotation: 0
    state: enabled
- name: pagerfreq
  id: variable
  parameters:
    comment: ''
    value: '466175000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [725, 23]
    rotation: 0
    state: enabled
- name: pocsagbitrate
  id: variable
  parameters:
    comment: ''
    value: '1200'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [837, 23]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '1000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 23]
    rotation: 0
    state: enabled
- name: symrate
  id: variable
  parameters:
    comment: ''
    value: '38400'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [530, 23]
    rotation: 0
    state: enabled
- name: tx_gain
  id: variable
  parameters:
    comment: ''
    value: '70'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [976, 23]
    rotation: 0
    state: enabled
- name: Number
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: number
    short_id: N
    type: str
    value: '"A"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 492.0]
    rotation: 0
    state: true
- name: RIC
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ric
    short_id: R
    type: intx
    value: '114223'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [18, 186]
    rotation: 0
    state: enabled
- name: SubRIC
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: sric
    short_id: S
    type: intx
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [18, 288]
    rotation: 0
    state: enabled
- name: Text
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: text
    short_id: T
    type: str
    value: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [18, 390]
    rotation: 0
    state: enabled
- name: analog_frequency_modulator_fc_0
  id: analog_frequency_modulator_fc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    sensitivity: 2.0 * math.pi * max_deviation / float(symrate)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 204.0]
    rotation: 0
    state: enabled
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: af_gain*0.7/1000
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 204.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: af_gain/100
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 204.0]
    rotation: 0
    state: enabled
- name: blocks_repeat_0
  id: blocks_repeat
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: int(symrate/pocsagbitrate)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 204.0]
    rotation: 0
    state: enabled
- name: iio_pluto_sink_0
  id: iio_pluto_sink
  parameters:
    affinity: ''
    alias: ''
    attenuation1: '0'
    auto_filter: 'True'
    bandwidth: '20000000'
    buffer_size: '32768'
    comment: ''
    cyclic: 'False'
    filter: ''
    frequency: pagerfreq+6000
    samplerate: samp_rate
    uri: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1056, 164.0]
    rotation: 0
    state: true
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [297, 23]
    rotation: 0
    state: enabled
- name: pfb_arb_resampler_xxx_0
  id: pfb_arb_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    atten: '100'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilts: '16'
    rrate: float(samp_rate)/float(symrate)
    samp_delay: '0'
    taps: ''
    type: ccf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 192.0]
    rotation: 0
    state: enabled
- name: pocsag_generator
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach this file is saved, GRC\
      \ will instantiate the first class it finds to get\nports and parameters of\
      \ your block. The arguments to __init__  will be the\nparameters. All of them\
      \ are required to have default values!\n\n\n\"\"\"\n#gr-pocsag: a gnuradio embedded\
      \ python block for sending pocsag messages\n#-----------------------------------------------------------------------\n\
      #\n#\n#This is the alpha test release of gr-pocsag, a embedded python block\
      \ for generating and\n#sending pocsag message.\n#\n#The gnu-radio companion\
      \ example uses a hackRF to send a pocsag-message on 433.900 Mhz.\n#\n#\n#The\
      \ block generates the bitpattern for a POCSAG-message, broadcasts it once and\
      \ then going into a loop\n#to shut down the transmitter module of the HackRF.\n\
      #\n#\n#The python code itself is located inside the \"pocsag generator\" epy_block\
      \ and as a seperate file \"gr-pocsagsend.py\".\n#\n#\n# (C) Kristoff Bonne,\
      \ ON1ARF\n# GPL v3\n#\n#Release-information:\n#Version: 0.0.1 (20180826)\n#Version:\
      \ 0.0.2 (20180828)\n#Version: 0.0.3 (20181006): correction idle pattern and\
      \ changing \"20 bits padding\" pattern\n#\n# 73s . kristoff - ON1ARF\n\n\nimport\
      \ numpy as np\nfrom gnuradio import gr\n\nfrom bitstring import BitArray\n\n\
      import time\n\n\n\nclass pocsagsender(gr.sync_block):\n\tdef __CalculateCRCandParity(self,datatype,data):\n\
      \t\tcw=data<<11 \n\n\t\t# make leftmost bit \"1\" for datatype 1 (text)\n\t\t\
      if datatype == 1:\n\t\t\tcw |= 0x80000000\n\t\t#end if\n\n\t\tlocal_cw=cw\n\n\
      \t\tfor i in range(21):\n\t\t\tif (cw & 0x80000000) > 0:\n\t\t\t\tcw ^= 0xED200000\n\
      \t\t\t#end if\n\t\t\tcw <<= 1\n\t\t#end for\n\n\t\tlocal_cw |= (cw >> 21)\n\n\
      \n\t\tparity=0\n\t\tcw=local_cw\n\t\tfor i in range(32):\n\t\t\tif (cw & 0x80000000)\
      \ > 0:\n\t\t\t\tparity += 1\n\t\t\t#end if\n\t\t\tcw <<= 1\n\t\t#end for\n\n\
      \t\t# make even parity\n\t\tlocal_cw += (parity % 2)\n\n\t\treturn(local_cw)\n\
      \t# end Calculate CRC and Pairty\n\n\n\tdef __createpocsagmsgtext(self,address,source,txt):\n\
      \n\t\t# checking input\n\t\tif not (0 < address <= 0x1fffff):\n\t\t\traise ValueError(address)\n\
      \t\t#end if\n\n\t\tif not (0 <= source <= 3):\n\t\t\traise ValueError(source)\n\
      \t\t#nd if\n\n\n\t\tif len(txt) == 0:\n\t\t\traise ValueError(txt)\n\t\t#end\
      \ if\n\n\n\t#\tif len(txt) >= 40:\n\t#\t\ttxt=txt[:39]\n\t#\t\tprint(\"Warning,\
      \ text truncated to 39 characters: {txt}\".format(txt=txt))\n\t\t#end if\n\n\
      \t\t# init pocsag message\n\t\t# init data\n\t\t# 2 batches\n\t\t# 1 batch =\
      \ sync codeword + 8 frames\n\t\t# 1 frame = 1 codeword\n\n\t\tsyncpattern =\
      \ 0xAAAAAAAA\n\t\tsynccodeword = 0x7cd215d8\n\n\t\tidlepattern  = 0x7ac9c197\n\
      \n\t\t# init all codewords with idle pattern: 2 batches = 16 frames = 32 codewords\n\
      \t\tcodeword = [idlepattern for i in range(32)]\n\n\n\t\t# part 1: address +\
      \ source \n\n\t\t# parse address and source\n\t\taddressline=address>>3\n\n\t\
      \t# add address-source\n\t\taddressline<<=2\n\t\taddressline += source\n\t\t\
      # the message starts at the frame address determined by the last 3 bits of the\
      \ address\n\t\tcwnum = ((address % 8) << 1) # codeword number\n\n\t\tcodeword[cwnum]=self.__CalculateCRCandParity(datatype\
      \ = 0, data = addressline)\n\n\n\t\t# part 2: text\n        \n\t\t# 2.1 convert\
      \ text into int, also add EOT char\n\t\tts=[ord(c) for c in txt] + [0x04] \n\
      \n\t\t# 2.2 make sure all characers are 7 bit\n\t\tts=list(map(lambda x: x%128,\
      \ ts))\n\n\t\t# 2.3 create one big list of bits\n\t\ttextbits=''\n\n\t\tfor\
      \ c in ts:\n\t\t\t# BitArray(uint=c,length=7).bin to convert character to 7-character\
      \ bit-string)\n\t\t\t# note, for transmission, the bit-order must be reversed\n\
      \t\t\tcharbits = BitArray(uint=c,length=7)\n\t\t\t# reverse order of bits\n\t\
      \t\tcharbits.reverse()\n\n\t\t\t# add to total string\n\t\t\ttextbits += charbits.bin\n\
      \t\t#end for\n\n\t\tnbits=len(textbits)\n\n\t\t# 2.4 make the list of bits \
      \ a multiple of 20 bits\n\t\tbitstoadd=20-(nbits % 20)\n\n\t\tif bitstoadd ==\
      \ 20:\n\t\t\tbitstoadd = 0\n\t\t#end if\n\t\tbitstoadd_rest = bitstoadd%2\n\t\
      \tbitstoadd_2bit = bitstoadd >> 1\n\t\ttextbits += '01' * bitstoadd_2bit\n\t\
      \tif bitstoadd_rest == 1:\n\t\t\ttextbits += '0'\n\t\t#end if\n\n\n\t\t# 2.5\
      \ for every block of 20 bits, calculate crc and partity, and add to codeword\n\
      \t\tncw = int(len(textbits)/20) # number of codewords\n\n\t\tstartbit=0\n\t\t\
      stopbit=20 # (actually, the 19th bit)\n\t\tfor i in range(ncw):\n\t\t\tthiscw=textbits[startbit:stopbit]\n\
      \t\t\tthiscw_i=int(thiscw,2) # convert list of bits to int\n\n\t\t\t#move up\
      \ all pointers\n\t\t\tstartbit=stopbit # stopbit is startbit + 20\n\t\t\tstopbit\
      \ += 20\n\n\t\t\t#codeword pointer\n\t\t\tcwnum += 1\n\n\t\t\t# calculate CRC\
      \ for a text block (datatype = 1)\n\t\t\tcodeword[cwnum]=self.__CalculateCRCandParity(datatype\
      \ = 1, data = thiscw_i)\n\t\t#end for (number of \n\n\n\t\t# done\n\n\t\t# now\
      \ create complete pocsag message\n\t\t# sync pattern\n\t\tret = [syncpattern\
      \ for i in range(18)]\n        \n\t\t# add sync codeword of 1st batch\n\t\t\
      ret.append(synccodeword)\n\n\t\t# add frames 0 to 7 (i.e. codewords 0 to 15)\n\
      \t\tret += [codeword[n] for n in range(16)]\n\n\n\t\t\n\t\t# create add 2nd\
      \ batch if the text has spilled into the 2nd batch\n\t\tif cwnum >=  16:\n\t\
      \t\t# long message, 2 batches\n\t\t\tnbatch=2\n\n\t\t\t# add sync codeword\n\
      \t\t\tret.append(synccodeword)\n        \n\t\t\t# and add frames 8 to 15 (i.e.\
      \ codewords 16 to 31)\n\t\t\tret += [codeword[n] for n in range(16,32)]\n\t\t\
      else:\n\t\t\t# short message, 1 batch\n\t\t\tnbatch=1\n\n\t\t#end else - ifif\n\
      \n\n\t\treturn((nbatch,ret))\n\n\t# end \"createpocsagmsgtext\"\n\n\tdef __createpocsagmsgnumber(self,address,source,number):\n\
      \n\t\t# checking input\n\t\tif not (0 < address <= 0x1fffff):\n\t\t\traise ValueError(address)\n\
      \t\t#end if\n\n\t\tif not (0 <= source <= 3):\n\t\t\traise ValueError(source)\n\
      \t\t#nd if\n\n\t\tif number == 0:\n\t\t\traise ValueError(number)\n\t\t#end\
      \ if\n\n\n\t#\tif len(txt) >= 40:\n\t#\t\ttxt=txt[:39]\n\t#\t\tprint(\"Warning,\
      \ text truncated to 39 characters: {txt}\".format(txt=txt))\n\t\t#end if\n\n\
      \t\t# init pocsag message\n\t\t# init data\n\t\t# 2 batches\n\t\t# 1 batch =\
      \ sync codeword + 8 frames\n\t\t# 1 frame = 1 codeword\n\n\t\tsyncpattern =\
      \ 0xAAAAAAAA\n\t\tsynccodeword = 0x7cd215d8\n\n\t\tidlepattern  = 0x7ac9c197\n\
      \n\t\t# Translate the number characters into 4-bit values\n\t\tnumbervalues\
      \ = {\"0\":0, \"1\":1, \"2\":2, \"3\":3, \"4\":4, \"5\":5, \"6\":6, \"7\":7,\
      \ \"8\":8, \"9\":9, \"*\":10, \"U\":11, \" \":12, \"-\":13, \")\":14, \"(\"\
      :15}\n\n\t\t# init all codewords with idle pattern: 2 batches = 16 frames =\
      \ 32 codewords\n\t\tcodeword = [idlepattern for i in range(32)]\n\n\n\t\t# part\
      \ 1: address + source \n\n\t\t# parse address and source\n\t\taddressline=address>>3\n\
      \n\t\t# add address-source\n\t\taddressline<<=2\n\t\taddressline += source\n\
      \t\t# the message starts at the frame address determined by the last 3 bits\
      \ of the address\n\t\tcwnum = ((address % 8) << 1) # codeword number\n\n\t\t\
      codeword[cwnum]=self.__CalculateCRCandParity(datatype = 0, data = addressline)\n\
      \n\n\t\t# part 2: number\n        \n\t\t# 2.1 convert text into int, also add\
      \ EOT char\n\t\tts=[numbervalues[c] for c in number]\n\n\t\t# 2.2 make sure\
      \ all characers are 7 bit\n\t\t#ts=list(map(lambda x: x%128, ts))\n\n\t\t# 2.3\
      \ create one big list of bits\n\t\tnumberbits=''\n\n\t\tfor c in ts:\n\t\t\t\
      # BitArray(uint=c,length=4).bin to convert number to nibble)\n\t\t\t# note,\
      \ for transmission, the bit-order must be reversed\n\t\t\tnumbits = BitArray(uint=c,length=4)\n\
      \t\t\t# reverse order of bits\n\t\t\tnumbits.reverse()\n\n\t\t\t# add to total\
      \ string\n\t\t\tnumberbits += numbits.bin\n\t\t#end for\n\n\t\tnbits=len(numberbits)\n\
      \n\t\t# 2.4 make the list of bits  a multiple of 20 bits\n\t\tbitstoadd=20-(nbits\
      \ % 20)\n\n\t\tif bitstoadd == 20:\n\t\t\tbitstoadd = 0\n\t\t#end if\n\t\tnibblestoadd\
      \ = bitstoadd >> 2\n\t\tnumberbits += '0011' * nibblestoadd\n\t\t#end if\n\n\
      \n\t\t# 2.5 for every block of 20 bits, calculate crc and partity, and add to\
      \ codeword\n\t\tncw = int(len(numberbits)/20) # number of codewords\n\n\t\t\
      startbit=0\n\t\tstopbit=20 # (actually, the 19th bit)\n\t\tfor i in range(ncw):\n\
      \t\t\tthiscw=numberbits[startbit:stopbit]\n\t\t\tthiscw_i=int(thiscw,2) # convert\
      \ list of bits to int\n\n\t\t\t#move up all pointers\n\t\t\tstartbit=stopbit\
      \ # stopbit is startbit + 20\n\t\t\tstopbit += 20\n\n\t\t\t#codeword pointer\n\
      \t\t\tcwnum += 1\n\n\t\t\t# calculate CRC for a text block (datatype = 1)\n\t\
      \t\tcodeword[cwnum]=self.__CalculateCRCandParity(datatype = 1, data = thiscw_i)\n\
      \t\t#end for (number of \n\n\n\t\t# done\n\n\t\t# now create complete pocsag\
      \ message\n\t\t# sync pattern\n\t\tret = [syncpattern for i in range(18)]\n\
      \        \n\t\t# add sync codeword of 1st batch\n\t\tret.append(synccodeword)\n\
      \n\t\t# add frames 0 to 7 (i.e. codewords 0 to 15)\n\t\tret += [codeword[n]\
      \ for n in range(16)]\n\n\n\t\t\n\t\t# create add 2nd batch if the text has\
      \ spilled into the 2nd batch\n\t\tif cwnum >=  16:\n\t\t\t# long message, 2\
      \ batches\n\t\t\tnbatch=2\n\n\t\t\t# add sync codeword\n\t\t\tret.append(synccodeword)\n\
      \        \n\t\t\t# and add frames 8 to 15 (i.e. codewords 16 to 31)\n\t\t\t\
      ret += [codeword[n] for n in range(16,32)]\n\t\telse:\n\t\t\t# short message,\
      \ 1 batch\n\t\t\tnbatch=1\n\n\t\t#end else - ifif\n\n\n\t\treturn((nbatch,ret))\n\
      \n\t# end \"createpocsagmsgnumber\"\n\n\n\tdef __init__(self, number = 2060073,\
      \ source = 0, sleeptime = 5, targetnumber=\"A\", text=\"Test\"):  # only default\
      \ arguments here\n\t\tgr.sync_block.__init__(\n\t\t\tself,\n\t\t\tname='pocsag\
      \ generator',\n\t\t\tin_sig=[],\n\t\t\tout_sig=[np.int8]\n\t\t)\n\n\n\t\tself.set_output_multiple(640)\n\
      \t\t\t# pocsag messages are either 1 batch (35 codeword = 120 octets), or 2\
      \ batches (52 codewords = 208 octets)\n\t\t\t# make the stream a little bit\
      \ longer to fit a multiple of 20 codewords\n\t\t\t# pocsag message of 1 batch\
      \ -> add 5 cw -> 40 (= 20 * 2) codewords\n\t\t\t# pocsag message of 2 batches\
      \ -> add 8 cw -> 60 (=20 *3) codewords\n\t\t\t# 20 cw = 80 octets = 640 bits\n\
      \n\t\tself.state = 0\n\t\tself.sleeptime = sleeptime\n\t\tself.number= int(number)\n\
      \t\tself.source = int(source)\n\n\t\tif targetnumber == \"A\":\n\t\t\tnbatch,psmsg=self.__createpocsagmsgtext(number,source,text)\n\
      \t\telse:\n\t\t\tnbatch,psmsg=self.__createpocsagmsgnumber(number,source,targetnumber)\n\
      \n\t\t# for a short message (nbtach=1), add 5 octest = 40 bits\n\t\t# for a\
      \ long message (nbatch=2), add 8 octets = 64 bits\n\n\t\tif nbatch == 1:\n\t\
      \t\tself.pocsagmsg=[0 for i in range(20)]\n\t\telif nbatch == 2:\n\t\t\tself.pocsagmsg=[0\
      \ for i in range(32)]\n\t\telse:\n\t\t\traise ValueError(nbatch)\n\t\t#end if\n\
      \t\t\t\n\n\t\tfor thismsg in psmsg:\n\t\t\tfor c in BitArray(uint=thismsg,length=32).bin:\n\
      \t\t\t\tself.pocsagmsg.append(1 if c == '1' else -1)\n\t\t#end for\n\n\t\t#\
      \ now add tail (all 0)\n\t\tif nbatch == 1:\n\t\t\tself.pocsagmsg+=[0 for i\
      \ in range(20)]\n\t\telif nbatch == 2:\n\t\t\tself.pocsagmsg+=[0 for i in range(32)]\n\
      \t\telse:\n\t\t\traise ValueError(nbatch)\n\t\t#end if\n\n\t\tself.msglen=len(self.pocsagmsg)\n\
      \n\t#end __init__\n\n\t#def forecast(self, noutput_items, ninput_items_required):\n\
      \t#\t#setup size of input_items[i] for work call\n\t#\tfor i in range(len(ninput_items_required)):\n\
      \t#\t\tninput_items_required[i] = noutput_items\n\n\tdef work(self, input_items,\
      \ output_items):\n\n\t\tif self.state == 0:\n\t\t\t# state 0 -> send pocsag\
      \ message \n\n\t\t\toutput_items[0][:self.msglen]=np.array(self.pocsagmsg, dtype=np.int8)\n\
      \n\t\t\tself.state = 1 # after this, go to sleep \n\t\t\treturn self.msglen\n\
      \t\t#end if\n\n\t\t# state 1: sleep\n\t\t#time.sleep(self.sleeptime)\n\n\t\t\
      # then go back to state 0 (transmit)\n\t\tself.state = 0\n\n\t\treturn -1 #\
      \ return without any data\n\t#end work\n# end class \"pocsagsender\"\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    number: RIC
    sleeptime: '5'
    source: SubRIC
    targetnumber: Number
    text: Text
  states:
    _io_cache: ('pocsag generator', 'pocsagsender', [('number', '2060073'), ('source',
      '0'), ('sleeptime', '5'), ('targetnumber', "'A'"), ('text', "'Test'")], [],
      [('0', 'byte', 1)], '', ['number', 'sleeptime', 'source'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 188.0]
    rotation: 0
    state: enabled

connections:
- [analog_frequency_modulator_fc_0, '0', blocks_multiply_const_vxx_0, '0']
- [blocks_char_to_float_0, '0', analog_frequency_modulator_fc_0, '0']
- [blocks_multiply_const_vxx_0, '0', pfb_arb_resampler_xxx_0, '0']
- [blocks_repeat_0, '0', blocks_char_to_float_0, '0']
- [pfb_arb_resampler_xxx_0, '0', iio_pluto_sink_0, '0']
- [pocsag_generator, '0', blocks_repeat_0, '0']

metadata:
  file_format: 1
